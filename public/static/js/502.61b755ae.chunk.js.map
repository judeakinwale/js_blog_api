{"version":3,"file":"static/js/502.61b755ae.chunk.js","mappings":"oKAKMA,EAAgB,CAEpB,CACEC,KAAM,YACNC,SAASC,EAAAA,EAAAA,OAAK,kBAAM,6BAAoC,KAE1D,CACEF,KAAM,WACNC,SAASC,EAAAA,EAAAA,OAAK,kBAAM,oDAAmC,KAEzD,CACEF,KAAM,QACNC,SAASC,EAAAA,EAAAA,OAAK,kBAAM,qDAAgC,KAEtD,CACEF,KAAM,cACNC,SAASC,EAAAA,EAAAA,OAAK,kBAAM,oDAAuC,KAE7D,CACEF,KAAM,gBACNC,SAASC,EAAAA,EAAAA,OAAK,kBAAM,qDAAqC,KAE3D,CACEF,KAAM,QACNC,SAASC,EAAAA,EAAAA,OAAK,kBAAM,qDAAgC,MAoBxD,UAjBA,WAEE,OADiBC,EAAAA,EAAAA,YAAWC,EAAAA,GAApBC,MAKNC,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CAAAC,SAAA,EACLC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CAACV,KAAK,GAAGC,SAASQ,EAAAA,EAAAA,KAACE,EAAAA,GAAQ,CAACC,GAAIC,EAAAA,GAAYC,MAAOC,SAAO,MAC/DhB,EAAciB,KAAI,SAAAC,GAAA,IAAGjB,EAAIiB,EAAJjB,KAAekB,EAAOD,EAAhBhB,QAAO,OACjCQ,EAAAA,EAAAA,KAACU,EAAAA,SAAQ,CAAAX,UACPC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CAAYV,KAAMA,EAAMC,SAASQ,EAAAA,EAAAA,KAACS,EAAO,KAAnClB,IADCA,EAEJ,QARRS,EAAAA,EAAAA,KAACE,EAAAA,GAAQ,CAACC,GAAIC,EAAAA,GAAYC,MAAOC,SAAO,GAYnD,C","sources":["routes/UserRouter.js"],"sourcesContent":["import { Fragment, lazy, useContext } from \"react\";\r\nimport { Navigate, Route, Routes } from \"react-router-dom\";\r\nimport { PublicPaths } from \"./path\";\r\nimport { AuthContext } from \"../context\";\r\n\r\nconst privateRoutes = [\r\n  /* Add paths for authorized users */\r\n  {\r\n    path: \"dashboard\",\r\n    element: lazy(() => import(\"../modules/Admin/Dashboard\")),\r\n  },\r\n  {\r\n    path: \"category\",\r\n    element: lazy(() => import(\"../modules/Admin/Category\")),\r\n  },\r\n  {\r\n    path: \"posts\",\r\n    element: lazy(() => import(\"../modules/Admin/Posts\")),\r\n  },\r\n  {\r\n    path: \"post/create\",\r\n    element: lazy(() => import(\"../modules/Admin/Posts/Create\")),\r\n  },\r\n  {\r\n    path: \"post/edit/:id\",\r\n    element: lazy(() => import(\"../modules/Admin/Posts/Edit\")),\r\n  },\r\n  {\r\n    path: \"admin\",\r\n    element: lazy(() => import(\"../modules/Admin/Admin\")),\r\n  },\r\n];\r\nfunction User() {\r\n  const { user } = useContext(AuthContext);\r\n  if (!user) {\r\n    return <Navigate to={PublicPaths.LOGIN} replace />;\r\n  }\r\n  return (\r\n    <Routes>\r\n      <Route path=\"\" element={<Navigate to={PublicPaths.LOGIN} replace />} />\r\n      {privateRoutes.map(({ path, element: Element }) => (\r\n        <Fragment key={path}>\r\n          <Route key={path} path={path} element={<Element />} />\r\n        </Fragment>\r\n      ))}\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default User;\r\n"],"names":["privateRoutes","path","element","lazy","useContext","AuthContext","user","_jsxs","Routes","children","_jsx","Route","Navigate","to","PublicPaths","LOGIN","replace","map","_ref","Element","Fragment"],"sourceRoot":""}